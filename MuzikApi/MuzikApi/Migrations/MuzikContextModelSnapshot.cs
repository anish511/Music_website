// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuzikApi.Models;

#nullable disable

namespace MuzikApi.Migrations
{
    [DbContext(typeof(MuzikContext))]
    partial class MuzikContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MuzikApi.Models.Admin", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adminId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("adminEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("adminName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("adminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MuzikApi.Models.Album", b =>
                {
                    b.Property<int>("albumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("albumId"));

                    b.Property<string>("albumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("albumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MuzikApi.Models.Artist", b =>
                {
                    b.Property<int>("artistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("artistId"));

                    b.Property<string>("artistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("artistType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("artistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MuzikApi.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MuzikApi.Models.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistSongId"));

                    b.Property<int>("playlistId")
                        .HasColumnType("int");

                    b.Property<int>("songId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistSongId");

                    b.HasIndex("playlistId");

                    b.HasIndex("songId");

                    b.ToTable("PlaylistsSongs");
                });

            modelBuilder.Entity("MuzikApi.Models.Song", b =>
                {
                    b.Property<int>("songId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("songId"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("audioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("songName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("songType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("songId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MuzikApi.Models.SongArtist", b =>
                {
                    b.Property<int>("SongArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongArtistId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("SongArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("SongsArtists");
                });

            modelBuilder.Entity("MuzikApi.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MuzikApi.Models.Playlist", b =>
                {
                    b.HasOne("MuzikApi.Models.User", "user")
                        .WithMany("playlists")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("MuzikApi.Models.PlaylistSong", b =>
                {
                    b.HasOne("MuzikApi.Models.Playlist", "playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("playlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuzikApi.Models.Song", "song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("songId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("playlist");

                    b.Navigation("song");
                });

            modelBuilder.Entity("MuzikApi.Models.Song", b =>
                {
                    b.HasOne("MuzikApi.Models.Album", "album")
                        .WithMany("songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("album");
                });

            modelBuilder.Entity("MuzikApi.Models.SongArtist", b =>
                {
                    b.HasOne("MuzikApi.Models.Artist", "artist")
                        .WithMany("SongArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuzikApi.Models.Song", "song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("artist");

                    b.Navigation("song");
                });

            modelBuilder.Entity("MuzikApi.Models.Album", b =>
                {
                    b.Navigation("songs");
                });

            modelBuilder.Entity("MuzikApi.Models.Artist", b =>
                {
                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("MuzikApi.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("MuzikApi.Models.Song", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("MuzikApi.Models.User", b =>
                {
                    b.Navigation("playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
